<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Dev.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Dev.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Fri Mar 13 00:38:40 2015
<BR><P>
<H3>Maximum Stack Usage =        592 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; ILI9225::drawText(char*, unsigned) &rArr; ILI9225::drawChar(unsigned, unsigned, unsigned, unsigned) &rArr; ILI9225::drawPixel(unsigned, unsigned, unsigned) &rArr; ILI9225::_setWindow(unsigned, unsigned, unsigned, unsigned) &rArr; ILI9225::_writeRegister(unsigned, unsigned) &rArr; ILI9225::_writeCommand(int)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[3]">Reset_Handler</a>
 <LI><a href="#[1f]">__user_initial_stackheap</a>
 <LI><a href="#[4]">Undef_Handler</a>
 <LI><a href="#[5]">SWI_Handler</a>
 <LI><a href="#[6]">PAbt_Handler</a>
 <LI><a href="#[7]">DAbt_Handler</a>
 <LI><a href="#[8]">IRQ_Handler</a>
 <LI><a href="#[9]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">Undef_Handler</a><BR>
 <LI><a href="#[5]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SWI_Handler</a><BR>
 <LI><a href="#[6]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">PAbt_Handler</a><BR>
 <LI><a href="#[7]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DAbt_Handler</a><BR>
 <LI><a href="#[8]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">IRQ_Handler</a><BR>
 <LI><a href="#[9]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[7]">DAbt_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[9]">FIQ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[8]">IRQ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6]">PAbt_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5]">SWI_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4]">Undef_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[d]">__main</a> from __main.o(!!!main) referenced from startup.o(RESET)
 <LI><a href="#[c]">__sti___8_main_cpp_clock</a> from main.o(i.__sti___8_main_cpp_clock) referenced from main.o(.init_array)
 <LI><a href="#[b]">main</a> from main.o(i.main) referenced from __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[f]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[11]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[5a]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[5b]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[16]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[5c]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[5d]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[5e]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[5f]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[12]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[60]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[61]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[62]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[63]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[64]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[65]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[66]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[67]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[68]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[69]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[6a]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[6b]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[6c]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[6d]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[6e]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[6f]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[70]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1a]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[71]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[72]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[73]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[74]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[75]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[76]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[10]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[77]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[13]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[15]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[78]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[17]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[79]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[21]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[19]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[7a]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[1b]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via Veneer)
</UL>

<P><STRONG><a name="[1f]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::ILI9225(spi1*, pin, pin, pin, pin)
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[28]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin::pin(int)
</UL>

<P><STRONG><a name="[7f]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[e]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r0
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[14]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[18]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[82]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1e]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[83]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1c]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit (via Veneer)
</UL>

<P><STRONG><a name="[84]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[22]"></a>__aeabi_uidivmod</STRONG> (ARM, 36 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay::ms(unsigned long)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0::callSetBaud()
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::setCursorLimits(unsigned, unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1::spi1(unsigned long, int, int)
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll::pll(unsigned long, int, int)
</UL>

<P><STRONG><a name="[87]"></a>__semihosting_library_function</STRONG> (ARM, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>pin::low()</STRONG> (ARM, 24 bytes, Stack size 0 bytes, pin.o(i._ZN3pin3lowEv))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::_writeCommand(int)
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::setBacklight(bool)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::begin(unsigned long)
</UL>

<P><STRONG><a name="[40]"></a>pin::high()</STRONG> (ARM, 24 bytes, Stack size 0 bytes, pin.o(i._ZN3pin4highEv))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::setBacklight(bool)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::_writeData(int)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::begin(unsigned long)
</UL>

<P><STRONG><a name="[29]"></a>pin::output()</STRONG> (ARM, 28 bytes, Stack size 0 bytes, pin.o(i._ZN3pin6outputEv))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::begin(unsigned long)
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin::pin(int)
</UL>

<P><STRONG><a name="[27]"></a>pin::pin(int)</STRONG> (ARM, 220 bytes, Stack size 16 bytes, pin.o(i._ZN3pinC1Ei))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pin::pin(int) &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin::output()
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::ILI9225(spi1*, pin, pin, pin, pin)
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>pin::pin__sub_object(int)</STRONG> (ARM, 0 bytes, Stack size 16 bytes, pin.o(i._ZN3pinC1Ei), UNUSED)

<P><STRONG><a name="[4e]"></a>pin::pin()</STRONG> (ARM, 4 bytes, Stack size 0 bytes, pin.o(i._ZN3pinC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::ILI9225(spi1*, pin, pin, pin, pin)
</UL>

<P><STRONG><a name="[89]"></a>pin::pin__sub_object()</STRONG> (ARM, 0 bytes, Stack size 0 bytes, pin.o(i._ZN3pinC1Ev), UNUSED)

<P><STRONG><a name="[51]"></a>pll::getCpuClock()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, pll.o(i._ZN3pll11getCpuClockEv))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b]"></a>pll::feedSequence()</STRONG> (ARM, 24 bytes, Stack size 0 bytes, pll.o(i._ZN3pll12feedSequenceEv))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll::setPll()
</UL>

<P><STRONG><a name="[50]"></a>pll::getPeripheralClock()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, pll.o(i._ZN3pll18getPeripheralClockEv))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e]"></a>pll::getP()</STRONG> (ARM, 80 bytes, Stack size 4 bytes, pll.o(i._ZN3pll4getPEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pll::getP()
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll::pll(unsigned long, int, int)
</UL>

<P><STRONG><a name="[2a]"></a>pll::setPll()</STRONG> (ARM, 96 bytes, Stack size 4 bytes, pll.o(i._ZN3pll6setPllEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pll::setPll()
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll::isLocked()
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll::feedSequence()
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll::pll(unsigned long, int, int)
</UL>

<P><STRONG><a name="[2c]"></a>pll::isLocked()</STRONG> (ARM, 20 bytes, Stack size 0 bytes, pll.o(i._ZN3pll8isLockedEv))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll::setPll()
</UL>

<P><STRONG><a name="[2d]"></a>pll::pll(unsigned long, int, int)</STRONG> (ARM, 76 bytes, Stack size 8 bytes, pll.o(i._ZN3pllC1Emii))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = pll::pll(unsigned long, int, int) &rArr; pll::setPll()
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll::setPll()
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll::getP()
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_clock
</UL>

<P><STRONG><a name="[8a]"></a>pll::pll__sub_object(unsigned long, int, int)</STRONG> (ARM, 0 bytes, Stack size 8 bytes, pll.o(i._ZN3pllC1Emii), UNUSED)

<P><STRONG><a name="[31]"></a>spi1::setClockDiv(int)</STRONG> (ARM, 16 bytes, Stack size 0 bytes, spi1.o(i._ZN4spi111setClockDivEi))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1::spi1(unsigned long, int, int)
</UL>

<P><STRONG><a name="[30]"></a>spi1::initPins()</STRONG> (ARM, 20 bytes, Stack size 0 bytes, spi1.o(i._ZN4spi18initPinsEv))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1::spi1(unsigned long, int, int)
</UL>

<P><STRONG><a name="[2f]"></a>spi1::spi1(unsigned long, int, int)</STRONG> (ARM, 100 bytes, Stack size 16 bytes, spi1.o(i._ZN4spi1C1Emii))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = spi1::spi1(unsigned long, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1::initPins()
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1::setClockDiv(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>spi1::spi1__sub_object(unsigned long, int, int)</STRONG> (ARM, 0 bytes, Stack size 16 bytes, spi1.o(i._ZN4spi1C1Emii), UNUSED)

<P><STRONG><a name="[32]"></a>delay::ms(unsigned long)</STRONG> (ARM, 40 bytes, Stack size 8 bytes, delay.o(i._ZN5delay2msEm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = delay::ms(unsigned long)
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::clear(int)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::begin(unsigned long)
</UL>

<P><STRONG><a name="[33]"></a>delay::delay(unsigned long)</STRONG> (ARM, 48 bytes, Stack size 8 bytes, delay.o(i._ZN5delayC1Em))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = delay::delay(unsigned long) &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::clear(int)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::begin(unsigned long)
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>delay::delay__sub_object(unsigned long)</STRONG> (ARM, 0 bytes, Stack size 8 bytes, delay.o(i._ZN5delayC1Em), UNUSED)

<P><STRONG><a name="[37]"></a>uart0::callSetBaud()</STRONG> (ARM, 44 bytes, Stack size 8 bytes, uart.o(i._ZN5uart011callSetBaudEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = uart0::callSetBaud()
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0::uart0(unsigned long, unsigned long, unsigned, unsigned, int)
</UL>

<P><STRONG><a name="[38]"></a>uart0::printString(char*)</STRONG> (ARM, 44 bytes, Stack size 8 bytes, uart.o(i._ZN5uart011printStringEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart0::printString(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0::write(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>uart0::read()</STRONG> (ARM, 24 bytes, Stack size 0 bytes, uart.o(i._ZN5uart04readEv))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[39]"></a>uart0::write(char)</STRONG> (ARM, 24 bytes, Stack size 0 bytes, uart.o(i._ZN5uart05writeEc))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0::printString(char*)
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a]"></a>uart0::uart0(unsigned long, unsigned long, unsigned, unsigned, int)</STRONG> (ARM, 148 bytes, Stack size 16 bytes, uart.o(i._ZN5uart0C1Emmjji))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = uart0::uart0(unsigned long, unsigned long, unsigned, unsigned, int) &rArr; uart0::callSetBaud()
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0::callSetBaud()
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>uart0::uart0__sub_object(unsigned long, unsigned long, unsigned, unsigned, int)</STRONG> (ARM, 0 bytes, Stack size 16 bytes, uart.o(i._ZN5uart0C1Emmjji), UNUSED)

<P><STRONG><a name="[3b]"></a>ILI9225::_setWindow(unsigned, unsigned, unsigned, unsigned)</STRONG> (ARM, 192 bytes, Stack size 24 bytes, ili9229.o(i._ZN7ILI922510_setWindowEjjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ILI9225::_setWindow(unsigned, unsigned, unsigned, unsigned) &rArr; ILI9225::_writeRegister(unsigned, unsigned) &rArr; ILI9225::_writeCommand(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::_orientCoordinates(unsigned&, unsigned&)
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::_writeRegister(unsigned, unsigned)
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::_writeCommand(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::drawPixel(unsigned, unsigned, unsigned)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::fillRectangle(unsigned, unsigned, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[3f]"></a>ILI9225::_writeData(int)</STRONG> (ARM, 32 bytes, Stack size 8 bytes, ili9229.o(i._ZN7ILI922510_writeDataEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ILI9225::_writeData(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin::high()
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::drawPixel(unsigned, unsigned, unsigned)
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::_writeRegister(unsigned, unsigned)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::fillRectangle(unsigned, unsigned, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[41]"></a>ILI9225::_updateCurX(int)</STRONG> (ARM, 88 bytes, Stack size 4 bytes, ili9229.o(i._ZN7ILI922511_updateCurXEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ILI9225::_updateCurX(int) &rArr; ILI9225::_updateCurY(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::_updateCurY(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::drawText(char*, unsigned)
</UL>

<P><STRONG><a name="[42]"></a>ILI9225::_updateCurY(int)</STRONG> (ARM, 104 bytes, Stack size 8 bytes, ili9229.o(i._ZN7ILI922511_updateCurYEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ILI9225::_updateCurY(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::_updateCurX(int)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::drawText(char*, unsigned)
</UL>

<P><STRONG><a name="[43]"></a>ILI9225::setBacklight(bool)</STRONG> (ARM, 20 bytes, Stack size 0 bytes, ili9229.o(i._ZN7ILI922512setBacklightEb))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin::high()
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin::low()
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::begin(unsigned long)
</UL>

<P><STRONG><a name="[3e]"></a>ILI9225::_writeCommand(int)</STRONG> (ARM, 32 bytes, Stack size 8 bytes, ili9229.o(i._ZN7ILI922513_writeCommandEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ILI9225::_writeCommand(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin::low()
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::_writeRegister(unsigned, unsigned)
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::_setWindow(unsigned, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[45]"></a>ILI9225::fillRectangle(unsigned, unsigned, unsigned, unsigned, unsigned)</STRONG> (ARM, 88 bytes, Stack size 32 bytes, ili9229.o(i._ZN7ILI922513fillRectangleEjjjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ILI9225::fillRectangle(unsigned, unsigned, unsigned, unsigned, unsigned) &rArr; ILI9225::_setWindow(unsigned, unsigned, unsigned, unsigned) &rArr; ILI9225::_writeRegister(unsigned, unsigned) &rArr; ILI9225::_writeCommand(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::_writeData(int)
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::_setWindow(unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::clear(int)
</UL>

<P><STRONG><a name="[3d]"></a>ILI9225::_writeRegister(unsigned, unsigned)</STRONG> (ARM, 32 bytes, Stack size 16 bytes, ili9229.o(i._ZN7ILI922514_writeRegisterEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ILI9225::_writeRegister(unsigned, unsigned) &rArr; ILI9225::_writeCommand(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::_writeCommand(int)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::_writeData(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::_setWindow(unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::begin(unsigned long)
</UL>

<P><STRONG><a name="[48]"></a>ILI9225::setOrientation(char)</STRONG> (ARM, 68 bytes, Stack size 0 bytes, ili9229.o(i._ZN7ILI922514setOrientationEc))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::clear(int)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::begin(unsigned long)
</UL>

<P><STRONG><a name="[46]"></a>ILI9225::setCursorLimits(unsigned, unsigned, unsigned, unsigned, unsigned)</STRONG> (ARM, 136 bytes, Stack size 32 bytes, ili9229.o(i._ZN7ILI922515setCursorLimitsEjjjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ILI9225::setCursorLimits(unsigned, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::begin(unsigned long)
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c]"></a>ILI9225::_orientCoordinates(unsigned&, unsigned&)</STRONG> (ARM, 148 bytes, Stack size 0 bytes, ili9229.o(i._ZN7ILI922518_orientCoordinatesERjS0_))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::drawPixel(unsigned, unsigned, unsigned)
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::_setWindow(unsigned, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[47]"></a>ILI9225::begin(unsigned long)</STRONG> (ARM, 996 bytes, Stack size 24 bytes, ili9229.o(i._ZN7ILI92255beginEm))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ILI9225::begin(unsigned long) &rArr; ILI9225::clear(int) &rArr; ILI9225::fillRectangle(unsigned, unsigned, unsigned, unsigned, unsigned) &rArr; ILI9225::_setWindow(unsigned, unsigned, unsigned, unsigned) &rArr; ILI9225::_writeRegister(unsigned, unsigned) &rArr; ILI9225::_writeCommand(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::setOrientation(char)
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::_writeRegister(unsigned, unsigned)
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::setBacklight(bool)
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin::output()
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay::ms(unsigned long)
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin::high()
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin::low()
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::clear(int)
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::setCursorLimits(unsigned, unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay::delay(unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>ILI9225::clear(int)</STRONG> (ARM, 104 bytes, Stack size 32 bytes, ili9229.o(i._ZN7ILI92255clearEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ILI9225::clear(int) &rArr; ILI9225::fillRectangle(unsigned, unsigned, unsigned, unsigned, unsigned) &rArr; ILI9225::_setWindow(unsigned, unsigned, unsigned, unsigned) &rArr; ILI9225::_writeRegister(unsigned, unsigned) &rArr; ILI9225::_writeCommand(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::setOrientation(char)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::fillRectangle(unsigned, unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay::ms(unsigned long)
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay::delay(unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::begin(unsigned long)
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>ILI9225::setFont(const char*)</STRONG> (ARM, 60 bytes, Stack size 0 bytes, ili9229.o(i._ZN7ILI92257setFontEPKc))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>ILI9225::drawChar(unsigned, unsigned, unsigned, unsigned)</STRONG> (ARM, 252 bytes, Stack size 56 bytes, ili9229.o(i._ZN7ILI92258drawCharEjjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ILI9225::drawChar(unsigned, unsigned, unsigned, unsigned) &rArr; ILI9225::drawPixel(unsigned, unsigned, unsigned) &rArr; ILI9225::_setWindow(unsigned, unsigned, unsigned, unsigned) &rArr; ILI9225::_writeRegister(unsigned, unsigned) &rArr; ILI9225::_writeCommand(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::drawPixel(unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::drawText(char*, unsigned)
</UL>

<P><STRONG><a name="[4c]"></a>ILI9225::drawText(char*, unsigned)</STRONG> (ARM, 164 bytes, Stack size 24 bytes, ili9229.o(i._ZN7ILI92258drawTextEPcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ILI9225::drawText(char*, unsigned) &rArr; ILI9225::drawChar(unsigned, unsigned, unsigned, unsigned) &rArr; ILI9225::drawPixel(unsigned, unsigned, unsigned) &rArr; ILI9225::_setWindow(unsigned, unsigned, unsigned, unsigned) &rArr; ILI9225::_writeRegister(unsigned, unsigned) &rArr; ILI9225::_writeCommand(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::drawChar(unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::_updateCurY(int)
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::_updateCurX(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>ILI9225::drawPixel(unsigned, unsigned, unsigned)</STRONG> (ARM, 104 bytes, Stack size 32 bytes, ili9229.o(i._ZN7ILI92259drawPixelEjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ILI9225::drawPixel(unsigned, unsigned, unsigned) &rArr; ILI9225::_setWindow(unsigned, unsigned, unsigned, unsigned) &rArr; ILI9225::_writeRegister(unsigned, unsigned) &rArr; ILI9225::_writeCommand(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::_orientCoordinates(unsigned&, unsigned&)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::_writeData(int)
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::_setWindow(unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::drawChar(unsigned, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[4d]"></a>ILI9225::ILI9225(spi1*, pin, pin, pin, pin)</STRONG> (ARM, 212 bytes, Stack size 56 bytes, ili9229.o(i._ZN7ILI9225C1EP4spi13pinS2_S2_S2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ILI9225::ILI9225(spi1*, pin, pin, pin, pin) &rArr; pin::pin(int) &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin::pin()
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin::pin(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>ILI9225::ILI9225__sub_object(spi1*, pin, pin, pin, pin)</STRONG> (ARM, 0 bytes, Stack size 56 bytes, ili9229.o(i._ZN7ILI9225C1EP4spi13pinS2_S2_S2_), UNUSED)

<P><STRONG><a name="[1d]"></a>__ARM_common_call_via_r0</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_aeabi.o(i.__ARM_common_call_via_r0))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[b]"></a>main</STRONG> (ARM, 700 bytes, Stack size 432 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = main &rArr; ILI9225::drawText(char*, unsigned) &rArr; ILI9225::drawChar(unsigned, unsigned, unsigned, unsigned) &rArr; ILI9225::drawPixel(unsigned, unsigned, unsigned) &rArr; ILI9225::_setWindow(unsigned, unsigned, unsigned, unsigned) &rArr; ILI9225::_writeRegister(unsigned, unsigned) &rArr; ILI9225::_writeCommand(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::ILI9225(spi1*, pin, pin, pin, pin)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::drawText(char*, unsigned)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::setFont(const char*)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::clear(int)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::begin(unsigned long)
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9225::setCursorLimits(unsigned, unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0::uart0(unsigned long, unsigned long, unsigned, unsigned, int)
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0::write(char)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0::read()
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0::printString(char*)
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay::delay(unsigned long)
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1::spi1(unsigned long, int, int)
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll::getPeripheralClock()
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll::getCpuClock()
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin::pin(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[35]"></a>__aeabi_ddiv</STRONG> (ARM, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay::delay(unsigned long)
</UL>

<P><STRONG><a name="[54]"></a>_ddiv</STRONG> (ARM, 600 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[36]"></a>__aeabi_d2uiz</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay::delay(unsigned long)
</UL>

<P><STRONG><a name="[57]"></a>_dfixu</STRONG> (ARM, 112 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_i2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[90]"></a>_dflt</STRONG> (ARM, 88 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[59]"></a>__dflt_normalise</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfltu
</UL>

<P><STRONG><a name="[34]"></a>__aeabi_ui2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay::delay(unsigned long)
</UL>

<P><STRONG><a name="[58]"></a>_dfltu</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dfltu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dflt_normalise
</UL>

<P><STRONG><a name="[56]"></a>__fpl_dnaninf</STRONG> (ARM, 192 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[55]"></a>__fpl_dretinf</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>__sti___8_main_cpp_clock</STRONG> (ARM, 20 bytes, Stack size 0 bytes, main.o(i.__sti___8_main_cpp_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = __sti___8_main_cpp_clock &rArr; pll::pll(unsigned long, int, int) &rArr; pll::setPll()
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll::pll(unsigned long, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[25]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[24]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[23]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[26]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[20]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
